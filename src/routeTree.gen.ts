/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as HiRouteImport } from './routes/hi'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestBlaRouteImport } from './routes/test/bla'
import { ServerRoute as HelloServerRouteImport } from './routes/hello'

const rootServerRouteImport = createServerRootRoute()

const HiRoute = HiRouteImport.update({
  id: '/hi',
  path: '/hi',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestBlaRoute = TestBlaRouteImport.update({
  id: '/test/bla',
  path: '/test/bla',
  getParentRoute: () => rootRouteImport,
} as any)
const HelloServerRoute = HelloServerRouteImport.update({
  id: '/hello',
  path: '/hello',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/hi': typeof HiRoute
  '/test/bla': typeof TestBlaRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/hi': typeof HiRoute
  '/test/bla': typeof TestBlaRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/hi': typeof HiRoute
  '/test/bla': typeof TestBlaRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/hi' | '/test/bla'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/hi' | '/test/bla'
  id: '__root__' | '/' | '/hi' | '/test/bla'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HiRoute: typeof HiRoute
  TestBlaRoute: typeof TestBlaRoute
}
export interface FileServerRoutesByFullPath {
  '/hello': typeof HelloServerRoute
}
export interface FileServerRoutesByTo {
  '/hello': typeof HelloServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/hello': typeof HelloServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/hello'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/hello'
  id: '__root__' | '/hello'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  HelloServerRoute: typeof HelloServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/hi': {
      id: '/hi'
      path: '/hi'
      fullPath: '/hi'
      preLoaderRoute: typeof HiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/bla': {
      id: '/test/bla'
      path: '/test/bla'
      fullPath: '/test/bla'
      preLoaderRoute: typeof TestBlaRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/hello': {
      id: '/hello'
      path: '/hello'
      fullPath: '/hello'
      preLoaderRoute: typeof HelloServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HiRoute: HiRoute,
  TestBlaRoute: TestBlaRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  HelloServerRoute: HelloServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
