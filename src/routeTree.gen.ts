/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as HiRouteImport } from './routes/hi'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HiFooRouteImport } from './routes/hi/foo'
import { Route as HiBlaRouteImport } from './routes/hi/bla'
import { ServerRoute as HelloServerRouteImport } from './routes/hello'

const rootServerRouteImport = createServerRootRoute()

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const HiRoute = HiRouteImport.update({
  id: '/hi',
  path: '/hi',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HiFooRoute = HiFooRouteImport.update({
  id: '/foo',
  path: '/foo',
  getParentRoute: () => HiRoute,
} as any)
const HiBlaRoute = HiBlaRouteImport.update({
  id: '/bla',
  path: '/bla',
  getParentRoute: () => HiRoute,
} as any)
const HelloServerRoute = HelloServerRouteImport.update({
  id: '/hello',
  path: '/hello',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/hi': typeof HiRouteWithChildren
  '/test': typeof TestRoute
  '/hi/bla': typeof HiBlaRoute
  '/hi/foo': typeof HiFooRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/hi': typeof HiRouteWithChildren
  '/test': typeof TestRoute
  '/hi/bla': typeof HiBlaRoute
  '/hi/foo': typeof HiFooRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/hi': typeof HiRouteWithChildren
  '/test': typeof TestRoute
  '/hi/bla': typeof HiBlaRoute
  '/hi/foo': typeof HiFooRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/hi' | '/test' | '/hi/bla' | '/hi/foo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/hi' | '/test' | '/hi/bla' | '/hi/foo'
  id: '__root__' | '/' | '/hi' | '/test' | '/hi/bla' | '/hi/foo'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HiRoute: typeof HiRouteWithChildren
  TestRoute: typeof TestRoute
}
export interface FileServerRoutesByFullPath {
  '/hello': typeof HelloServerRoute
}
export interface FileServerRoutesByTo {
  '/hello': typeof HelloServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/hello': typeof HelloServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/hello'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/hello'
  id: '__root__' | '/hello'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  HelloServerRoute: typeof HelloServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hi': {
      id: '/hi'
      path: '/hi'
      fullPath: '/hi'
      preLoaderRoute: typeof HiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hi/foo': {
      id: '/hi/foo'
      path: '/foo'
      fullPath: '/hi/foo'
      preLoaderRoute: typeof HiFooRouteImport
      parentRoute: typeof HiRoute
    }
    '/hi/bla': {
      id: '/hi/bla'
      path: '/bla'
      fullPath: '/hi/bla'
      preLoaderRoute: typeof HiBlaRouteImport
      parentRoute: typeof HiRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/hello': {
      id: '/hello'
      path: '/hello'
      fullPath: '/hello'
      preLoaderRoute: typeof HelloServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface HiRouteChildren {
  HiBlaRoute: typeof HiBlaRoute
  HiFooRoute: typeof HiFooRoute
}

const HiRouteChildren: HiRouteChildren = {
  HiBlaRoute: HiBlaRoute,
  HiFooRoute: HiFooRoute,
}

const HiRouteWithChildren = HiRoute._addFileChildren(HiRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HiRoute: HiRouteWithChildren,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  HelloServerRoute: HelloServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
